#!/bin/bash

# Function to convert decimal to binary
decimal_to_binary() {
    local num=$1
    local binary=""
    
    while [ "$num" -gt 0 ]; do
        remainder=$((num % 2))
        binary="${remainder}${binary}"
        num=$((num / 2))
    done
    
    echo "$binary"
}

# Function to perform XOR of two binary numbers
xor_binary() {
    local binary1="$1"
    local binary2="$2"
    local result=""
    
    max_length=$(( ${#binary1} > ${#binary2} ? ${#binary1} : ${#binary2} ))

    for ((i = 0; i < max_length; i++)); do
        if [ $i -lt ${#binary1} ]; then
            bit1="${binary1:${#binary1}-i-1:1}"
        else
            bit1=0
        fi

        if [ $i -lt ${#binary2} ]; then
            bit2="${binary2:${#binary2}-i-1:1}"
        else
            bit2=0
        fi

        if [ "$bit1" -eq "$bit2" ]; then
            result="${result}0"
        else
            result="${result}1"
        fi
    done
    
    echo "$result"
}

# Check if two command line arguments are provided
if [ $# -ne 2 ]; then
    echo "Usage: $0 <number1> <number2>"
    exit 1
fi

number1="$1"
number2="$2"

binary_num1=$(decimal_to_binary "$number1")
binary_num2=$(decimal_to_binary "$number2")

xor_result=$(xor_binary "$binary_num1" "$binary_num2")

echo "Binary conversion of $number1: $binary_num1"
echo "Binary conversion of $number2: $binary_num2"
echo "XOR of $binary_num1 and $binary_num2: $xor_result"

/////////////////////////////////
c++ code

#include <iostream>
#include <vector>

// Function to convert decimal to binary
std::vector<int> decimalToBinary(int num) {
    std::vector<int> binary;
    while (num > 0) {
        binary.push_back(num % 2);
        num /= 2;
    }
    return binary;
}

// Function to calculate XOR of two binary numbers
std::vector<int> calculateXOR(const std::vector<int>& binary1, const std::vector<int>& binary2) {
    std::vector<int> xorResult;
    int maxLength = std::max(binary1.size(), binary2.size());

    for (int i = 0; i < maxLength; i++) {
        int bit1 = (i < binary1.size()) ? binary1[i] : 0;
        int bit2 = (i < binary2.size()) ? binary2[i] : 0;
        xorResult.push_back(bit1 != bit2);
    }

    return xorResult;
}

int main() {
    int num1, num2;

    // Input the two numbers
    std::cout << "Enter the first number: ";
    std::cin >> num1;

    std::cout << "Enter the second number: ";
    std::cin >> num2;

    // Convert the numbers to binary form
    std::vector<int> binary1 = decimalToBinary(num1);
    std::vector<int> binary2 = decimalToBinary(num2);

    // Calculate the XOR of the two binary numbers
    std::vector<int> xorResult = calculateXOR(binary1, binary2);

    // Convert XOR result to decimal
    int decimalXOR = 0;
    int power = 1;
    for (int i = 0; i < xorResult.size(); i++) {
        decimalXOR += xorResult[i] * power;
        power *= 2;
    }

    std::cout << "Binary form of " << num1 << ": ";
    for (int i = binary1.size() - 1; i >= 0; i--) {
        std::cout << binary1[i];
    }
    std::cout << std::endl;

    std::cout << "Binary form of " << num2 << ": ";
    for (int i = binary2.size() - 1; i >= 0; i--) {
        std::cout << binary2[i];
    }
    std::cout << std::endl;

    std::cout << "XOR of " << num1 << " and " << num2 << " is: " << decimalXOR << std::endl;

    return 0;
}



***********************************************************
#!/bin/bash

# Check if at least three command line arguments are provided
if [ $# -lt 3 ]; then
    echo "Usage: $0 <N> <n1> <n2> ... <nN> <S>"
    exit 1
fi

# Get the size of the array N
N="$1"
shift

# Get the array values
array=()
for ((i = 0; i < N; i++)); do
    array+=("$1")
    shift
done

# Get the search item S
S="$1"

# Search for the item in the array
found=false
for ((i = 0; i < N; i++)); do
    if [ "${array[i]}" -eq "$S" ]; then
        echo "Search found along with its index of searched item $S: $i"
        found=true
        break
    fi
done

if [ "$found" = false ]; then
    echo "Search not found."
fi

***********************************************************
#!/bin/bash

# Function to check if a number is prime
is_prime() {
    local num="$1"
    if [ "$num" -le 1 ]; then
        return 1
    fi
    for ((i = 2; i * i <= num; i++)); do
        if [ $((num % i)) -eq 0 ]; then
            return 1
        fi
    done
    return 0
}

# Function to calculate factorial
factorial() {
    local num="$1"
    if [ "$num" -eq 0 ] || [ "$num" -eq 1 ]; then
        echo 1
    else
        local prev_factorial=$(factorial $((num - 1)))
        echo $((num * prev_factorial))
    fi
}

# Check if a command line argument is provided
if [ $# -ne 1 ]; then
    echo "Usage: $0 <number>"
    exit 1
fi

number="$1"

# Calculate and print the factorial
factorial_result=$(factorial "$number")
echo "Factorial of $number is: $factorial_result"

# Calculate and print the sum of prime numbers up to the same number
sum=0
for ((i = 2; i <= number; i++)); do
    if is_prime "$i"; then
        sum=$((sum + i))
    fi
done
echo "Sum of prime numbers up to $number is: $sum"

************************************************************

#!/bin/bash

# Check if a command line argument is provided
if [ $# -ne 1 ]; then
    echo "Usage: $0 <password>"
    exit 1
fi

password="$1"

# Check for alphabet and number
if [[ ! "$password" =~ [a-zA-Z] ]] || [[ ! "$password" =~ [0-9] ]]; then
    echo "<Invalid Password> (Must contain both alphabet and number)"
    exit
fi

# Check for special character
if [[ ! "$password" =~ [/()<>?] ]]; then
    echo "<Invalid Password> (Must contain at least one of /, (, ), <, >, ?)"
    exit
fi



echo "Password is strong."

